// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DropZoneContent renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <DropZoneContent
    handleImageDrop={[MockFunction]}
    imageAlert={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          className="false"
          htmlFor="file-browse"
        >
          <div>
            <h1>
              Browse or Drop Image Here
            </h1>
            <h3>
              JPG, GIF, PNG or SVG no larger than 3 MB
            </h3>
          </div>
        </label>,
        <input
          accept="image/*"
          id="file-browse"
          onChange={[Function]}
          type="file"
        />,
      ],
      "className": "drop-zone-content",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div>
            <h1>
              Browse or Drop Image Here
            </h1>
            <h3>
              JPG, GIF, PNG or SVG no larger than 3 MB
            </h3>
          </div>,
          "className": "false",
          "htmlFor": "file-browse",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1>
                Browse or Drop Image Here
              </h1>,
              <h3>
                JPG, GIF, PNG or SVG no larger than 3 MB
              </h3>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Browse or Drop Image Here",
              },
              "ref": null,
              "rendered": "Browse or Drop Image Here",
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "JPG, GIF, PNG or SVG no larger than 3 MB",
              },
              "ref": null,
              "rendered": "JPG, GIF, PNG or SVG no larger than 3 MB",
              "type": "h3",
            },
          ],
          "type": "div",
        },
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "accept": "image/*",
          "id": "file-browse",
          "onChange": [Function],
          "type": "file",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className="false"
            htmlFor="file-browse"
          >
            <div>
              <h1>
                Browse or Drop Image Here
              </h1>
              <h3>
                JPG, GIF, PNG or SVG no larger than 3 MB
              </h3>
            </div>
          </label>,
          <input
            accept="image/*"
            id="file-browse"
            onChange={[Function]}
            type="file"
          />,
        ],
        "className": "drop-zone-content",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div>
              <h1>
                Browse or Drop Image Here
              </h1>
              <h3>
                JPG, GIF, PNG or SVG no larger than 3 MB
              </h3>
            </div>,
            "className": "false",
            "htmlFor": "file-browse",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h1>
                  Browse or Drop Image Here
                </h1>,
                <h3>
                  JPG, GIF, PNG or SVG no larger than 3 MB
                </h3>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Browse or Drop Image Here",
                },
                "ref": null,
                "rendered": "Browse or Drop Image Here",
                "type": "h1",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "JPG, GIF, PNG or SVG no larger than 3 MB",
                },
                "ref": null,
                "rendered": "JPG, GIF, PNG or SVG no larger than 3 MB",
                "type": "h3",
              },
            ],
            "type": "div",
          },
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "accept": "image/*",
            "id": "file-browse",
            "onChange": [Function],
            "type": "file",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getSnapshotBeforeUpdate": true,
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
